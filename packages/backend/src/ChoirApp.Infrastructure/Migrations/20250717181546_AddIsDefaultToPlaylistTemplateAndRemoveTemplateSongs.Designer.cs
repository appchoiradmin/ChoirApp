// <auto-generated />
using System;
using ChoirApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChoirApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717181546_AddIsDefaultToPlaylistTemplateAndRemoveTemplateSongs")]
    partial class AddIsDefaultToPlaylistTemplateAndRemoveTemplateSongs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChoirApp.Domain.Entities.Choir", b =>
                {
                    b.Property<Guid>("ChoirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<Guid>("AdminUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_user_id");

                    b.Property<string>("ChoirName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("choir_name");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.HasKey("ChoirId");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ChoirName")
                        .IsUnique();

                    b.ToTable("Choirs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.ChoirInvitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("invitation_id");

                    b.Property<Guid>("ChoirId")
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<DateTimeOffset>("DateSent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_sent");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invitation_token");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("InvitationId");

                    b.HasIndex("ChoirId");

                    b.HasIndex("InvitationToken")
                        .IsUnique();

                    b.ToTable("ChoirInvitations");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Playlist", b =>
                {
                    b.Property<Guid>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_id");

                    b.Property<Guid?>("ChoirId")
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("PlaylistId");

                    b.HasIndex("ChoirId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PlaylistId")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistSection", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("SectionId");

                    b.HasIndex("PlaylistId", "Order")
                        .IsUnique();

                    b.ToTable("PlaylistSections");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistSong", b =>
                {
                    b.Property<Guid>("PlaylistSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_song_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("PlaylistSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_section_id");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.HasKey("PlaylistSongId");

                    b.HasIndex("SongId");

                    b.HasIndex("PlaylistSectionId", "Order")
                        .IsUnique();

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTag", b =>
                {
                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<Guid>("PlaylistTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("playlist_tag_id");

                    b.HasKey("PlaylistId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PlaylistTags");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplate", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<Guid>("ChoirId")
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("TemplateId");

                    b.HasIndex("ChoirId", "Title")
                        .IsUnique();

                    b.ToTable("PlaylistTemplates");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplateSection", b =>
                {
                    b.Property<Guid>("TemplateSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("template_section_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("TemplateSectionId");

                    b.HasIndex("TemplateId", "Order")
                        .IsUnique();

                    b.ToTable("PlaylistTemplateSections");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplateSong", b =>
                {
                    b.Property<Guid>("TemplateSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("template_song_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<Guid>("TemplateSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_section_id");

                    b.HasKey("TemplateSongId");

                    b.HasIndex("SongId");

                    b.HasIndex("TemplateSectionId", "Order")
                        .IsUnique();

                    b.ToTable("PlaylistTemplateSongs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Song", b =>
                {
                    b.Property<Guid>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<Guid?>("BaseSongId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_song_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("version_number");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("SongId");

                    b.HasIndex("BaseSongId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.SongTag", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("SongId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("SongTags");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.SongVisibility", b =>
                {
                    b.Property<Guid>("VisibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("visibility_id");

                    b.Property<Guid>("ChoirId")
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid")
                        .HasColumnName("song_id");

                    b.HasKey("VisibilityId");

                    b.HasIndex("ChoirId");

                    b.HasIndex("SongId", "ChoirId")
                        .IsUnique();

                    b.ToTable("SongVisibilities");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag_name");

                    b.HasKey("TagId");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_id");

                    b.Property<bool>("HasCompletedOnboarding")
                        .HasColumnType("boolean")
                        .HasColumnName("has_completed_onboarding");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.UserChoir", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ChoirId")
                        .HasColumnType("uuid")
                        .HasColumnName("choir_id");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.HasKey("UserId", "ChoirId");

                    b.HasIndex("ChoirId");

                    b.ToTable("UserChoirs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Choir", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.User", "Admin")
                        .WithMany("AdminOfChoirs")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.ChoirInvitation", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Choir", "Choir")
                        .WithMany()
                        .HasForeignKey("ChoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choir");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Choir", "Choir")
                        .WithMany("Playlists")
                        .HasForeignKey("ChoirId");

                    b.HasOne("ChoirApp.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choir");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistSection", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Sections")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistSong", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.PlaylistSection", "PlaylistSection")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChoirApp.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaylistSection");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTag", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Playlist", "Playlist")
                        .WithMany("PlaylistTags")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChoirApp.Domain.Entities.Tag", "Tag")
                        .WithMany("PlaylistTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplate", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Choir", "Choir")
                        .WithMany("PlaylistTemplates")
                        .HasForeignKey("ChoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choir");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplateSection", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.PlaylistTemplate", "Template")
                        .WithMany("Sections")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplateSong", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.HasOne("ChoirApp.Domain.Entities.PlaylistTemplateSection", "TemplateSection")
                        .WithMany("PlaylistTemplateSongs")
                        .HasForeignKey("TemplateSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("TemplateSection");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Song", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Song", "BaseSong")
                        .WithMany("Derivatives")
                        .HasForeignKey("BaseSongId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChoirApp.Domain.Entities.User", "Creator")
                        .WithMany("CreatedSongs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseSong");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.SongTag", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Song", "Song")
                        .WithMany("Tags")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChoirApp.Domain.Entities.Tag", "Tag")
                        .WithMany("SongTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.SongVisibility", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Choir", "Choir")
                        .WithMany()
                        .HasForeignKey("ChoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChoirApp.Domain.Entities.Song", "Song")
                        .WithMany("Visibilities")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choir");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.UserChoir", b =>
                {
                    b.HasOne("ChoirApp.Domain.Entities.Choir", "Choir")
                        .WithMany("UserChoirs")
                        .HasForeignKey("ChoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChoirApp.Domain.Entities.User", "User")
                        .WithMany("UserChoirs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choir");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Choir", b =>
                {
                    b.Navigation("PlaylistTemplates");

                    b.Navigation("Playlists");

                    b.Navigation("UserChoirs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("PlaylistTags");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistSection", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplate", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.PlaylistTemplateSection", b =>
                {
                    b.Navigation("PlaylistTemplateSongs");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Song", b =>
                {
                    b.Navigation("Derivatives");

                    b.Navigation("Tags");

                    b.Navigation("Visibilities");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PlaylistTags");

                    b.Navigation("SongTags");
                });

            modelBuilder.Entity("ChoirApp.Domain.Entities.User", b =>
                {
                    b.Navigation("AdminOfChoirs");

                    b.Navigation("CreatedSongs");

                    b.Navigation("UserChoirs");
                });
#pragma warning restore 612, 618
        }
    }
}
