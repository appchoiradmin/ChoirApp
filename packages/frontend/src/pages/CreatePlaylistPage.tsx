import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUser } from '../hooks/useUser';
import { createPlaylist, getPlaylistTemplatesByChoirId, getPlaylistTemplateById } from '../services/playlistService';
import { getChoirSongsByChoirId } from '../services/choirSongService';
import { getAllMasterSongs } from '../services/masterSongService';
import { PlaylistTemplate, PlaylistSection, PlaylistSong } from '../types/playlist';
import { ChoirSongVersionDto } from '../types/choir';
import { MasterSongDto } from '../types/song';
import MovableSongItem from '../components/MovableSongItem';
import { Button, Card, LoadingSpinner } from '../components/ui';
import Layout from '../components/ui/Layout';
import toast from 'react-hot-toast';
import { 
  PlusIcon, 
  MusicalNoteIcon,
  CalendarIcon,
  DocumentTextIcon,
  XMarkIcon,
  CheckIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import styles from './CreatePlaylistPage.module.scss';

const CreatePlaylistPage: React.FC = () => {
  const { user, token } = useUser();
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [isPublic, setIsPublic] = useState(false);
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  const [templates, setTemplates] = useState<PlaylistTemplate[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<PlaylistTemplate | null>(null);
  const [sections, setSections] = useState<PlaylistSection[]>([]);
  const [choirSongs, setChoirSongs] = useState<ChoirSongVersionDto[]>([]);
  const [masterSongs, setMasterSongs] = useState<MasterSongDto[]>([]);

  useEffect(() => {
    const fetchInitialData = async () => {
      if (user?.choirId && token) {
        try {
          const [fetchedTemplates, fetchedSongs, fetchedMasterSongs] = await Promise.all([
            getPlaylistTemplatesByChoirId(user.choirId, token),
            getChoirSongsByChoirId(user.choirId, token),
            getAllMasterSongs(token)
          ]);
          setTemplates(fetchedTemplates);
          setChoirSongs(fetchedSongs);
          setMasterSongs(fetchedMasterSongs);
        } catch (error) {
          console.error(error);
        }
      }
    };

    fetchInitialData();
  }, [user, token]);

  const handleTemplateChange = async (templateId: string) => {
    if (templateId && token) {
      try {
        const template = await getPlaylistTemplateById(templateId, token);
        setSelectedTemplate(template);
        setSections(template.sections.map(s => ({...s, songs: []})));
      } catch (error) {
        console.error(error);
      }
    } else {
      setSelectedTemplate(null);
      setSections([]);
    }
  };

  const handleMoveSong = (song: PlaylistSong, fromSectionId: string, toSectionId: string) => {
    setSections(prevSections => {
      const fromSection = prevSections.find(s => s.id === fromSectionId);
      const toSection = prevSections.find(s => s.id === toSectionId);
      if (!fromSection || !toSection) return prevSections;
      const songToMove = fromSection.songs.find(s => s === song);
      if (!songToMove) return prevSections;
      // Remove from old section
      const newFromSongs = fromSection.songs.filter(s => s !== song);
      // Add to new section at end
      const newToSongs = [...toSection.songs, { ...songToMove, order: toSection.songs.length }];
      return prevSections.map(s => {
        if (s.id === fromSectionId) return { ...s, songs: newFromSongs };
        if (s.id === toSectionId) return { ...s, songs: newToSongs };
        return s;
      });
    });
  };

  const handleRemoveSongFromSection = (sectionId: string, masterSongId: string) => {
    setSections(prevSections => prevSections.map(s =>
      s.id === sectionId
        ? { ...s, songs: s.songs.filter(song => song.masterSongId !== masterSongId) }
        : s
    ));
  };

  const handleAddSongToSection = (sectionId: string, choirSongVersionId: string) => {
    const song = choirSongs.find(s => s.choirSongId === choirSongVersionId);
    if (!song) return;

    const newSections = sections.map(section => {
      if (section.id === sectionId) {
        const newSong: PlaylistSong = {
          id: '', // This will be generated by the backend
          order: section.songs.length,
          choirSongVersionId: song.choirSongId,
          masterSongId: song.masterSongId
        };
        return { ...section, songs: [...section.songs, newSong] };
      }
      return section;
    });
    setSections(newSections);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // Only persist if there is at least one song in any section
    const hasSongs = sections.some(section => section.songs.length > 0);
    if (!hasSongs) {
      alert('Add at least one song before saving the playlist.');
      return;
    }
    if (user?.choirId && token) {
      try {
        await createPlaylist({ title, isPublic, choirId: user.choirId, date: new Date(date), sections, playlistTemplateId: selectedTemplate?.id }, token);
        navigate(`/choir/${user.choirId}/playlists`);
      } catch (error) {
        console.error(error);
      }
    }
  };


  return (
    <div className={styles.pageContainer}>
      <h1 className={styles.title}>New Playlist</h1>
      <form className={styles.form} onSubmit={handleSubmit}>
        <div className={styles.formGroup}>
          <label className={styles.label}>Title</label>
          <input
            className={styles.input}
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Date</label>
          <input
            className={styles.input}
            type="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
          />
        </div>
        <div className={styles.formGroup}>
          <label className={styles.label}>Template</label>
          <div className={styles.select}>
            <select
              value={selectedTemplate?.id || ''}
              onChange={(e) => handleTemplateChange(e.target.value)}
            >
              <option value="">No Template</option>
              {templates.map((template) => (
                <option key={template.id} value={template.id}>
                  {template.title}
                </option>
              ))}
            </select>
          </div>
        </div>
        <div className={styles.formGroup}>
          <label className={styles.checkbox}>
            <input
              type="checkbox"
              checked={isPublic}
              onChange={(e) => setIsPublic(e.target.checked)}
            />
            Public
          </label>
        </div>
        <div className={styles.formGroup}>
          <button className={styles.button} type="submit">
            Create
          </button>
        </div>
      </form>

      {selectedTemplate && (
        <div>
          <h2 className={styles.sectionTitle}>Sections</h2>
          {sections.map((section) => (
            <div key={section.id} className={styles.sectionBox}>
              <h3 className={styles.sectionTitle}>{section.title}</h3>
              <ul className={styles.songList}>
                {section.songs.map((song) => (
                  <MovableSongItem
                    key={song.choirSongVersionId || song.masterSongId}
                    song={song}
                    section={section}
                    sections={sections}
                    choirSongs={choirSongs}
                    masterSongs={masterSongs}
                    onMoveSong={handleMoveSong}
                    onRemoveSong={() => handleRemoveSongFromSection(section.id, song.masterSongId!)}
                  />
                ))}
              </ul>
              <div className={styles.addSongRow}>
                <div className={styles.select}>
                  <select onChange={(e) => handleAddSongToSection(section.id, e.target.value)}>
                    <option>Select a song</option>
                    {choirSongs.map(song => (
                      <option key={song.choirSongId} value={song.choirSongId}>{song.masterSong?.title}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CreatePlaylistPage;
