import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUser } from '../hooks/useUser';
import { createPlaylist, getPlaylistTemplatesByChoirId, getPlaylistTemplateById } from '../services/playlistService';
import { getChoirSongsByChoirId } from '../services/choirSongService';
import { PlaylistTemplate, PlaylistSection, PlaylistSong } from '../types/playlist';
import { ChoirSongVersionDto } from '../types/choir';

const CreatePlaylistPage: React.FC = () => {
  const { user, token } = useUser();
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [isPublic, setIsPublic] = useState(false);
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  const [templates, setTemplates] = useState<PlaylistTemplate[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<PlaylistTemplate | null>(null);
  const [sections, setSections] = useState<PlaylistSection[]>([]);
  const [choirSongs, setChoirSongs] = useState<ChoirSongVersionDto[]>([]);

  useEffect(() => {
    const fetchInitialData = async () => {
      if (user?.choirId && token) {
        try {
          const [fetchedTemplates, fetchedSongs] = await Promise.all([
            getPlaylistTemplatesByChoirId(user.choirId, token),
            getChoirSongsByChoirId(user.choirId, token)
          ]);
          setTemplates(fetchedTemplates);
          setChoirSongs(fetchedSongs);
        } catch (error) {
          console.error(error);
        }
      }
    };

    fetchInitialData();
  }, [user, token]);

  const handleTemplateChange = async (templateId: string) => {
    if (templateId && token) {
      try {
        const template = await getPlaylistTemplateById(templateId, token);
        setSelectedTemplate(template);
        setSections(template.sections.map(s => ({...s, songs: []})));
      } catch (error) {
        console.error(error);
      }
    } else {
      setSelectedTemplate(null);
      setSections([]);
    }
  };

  const handleAddSongToSection = (sectionId: string, choirSongVersionId: string) => {
    const song = choirSongs.find(s => s.choirSongId === choirSongVersionId);
    if (!song) return;

    const newSections = sections.map(section => {
      if (section.id === sectionId) {
        const newSong: PlaylistSong = {
          id: '', // This will be generated by the backend
          order: section.songs.length,
          choirSongVersionId: song.choirSongId,
          masterSongId: song.masterSongId
        };
        return { ...section, songs: [...section.songs, newSong] };
      }
      return section;
    });
    setSections(newSections);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (user?.choirId && token) {
      try {
        await createPlaylist({ title, isPublic, choirId: user.choirId, date: new Date(date), sections, playlistTemplateId: selectedTemplate?.id }, token);
        navigate(`/choir/${user.choirId}/playlists`);
      } catch (error) {
        console.error(error);
      }
    }
  };

  return (
    <div className="container">
      <h1 className="title">New Playlist</h1>
      <form onSubmit={handleSubmit}>
        <div className="field">
          <label className="label">Title</label>
          <div className="control">
            <input
              className="input"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>
        </div>
        <div className="field">
          <label className="label">Date</label>
          <div className="control">
            <input
              className="input"
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
            />
          </div>
        </div>
        <div className="field">
          <label className="label">Template</label>
          <div className="control">
            <div className="select">
              <select
                value={selectedTemplate?.id || ''}
                onChange={(e) => handleTemplateChange(e.target.value)}
              >
                <option value="">No Template</option>
                {templates.map((template) => (
                  <option key={template.id} value={template.id}>
                    {template.title}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
        <div className="field">
          <label className="checkbox">
            <input
              type="checkbox"
              checked={isPublic}
              onChange={(e) => setIsPublic(e.target.checked)}
            />
            Public
          </label>
        </div>
        <div className="field">
          <div className="control">
            <button className="button is-primary" type="submit">
              Create
            </button>
          </div>
        </div>
      </form>

      {selectedTemplate && (
        <div>
          <h2 className="title is-4 mt-5">Sections</h2>
          {sections.map((section) => (
            <div key={section.id} className="box">
              <h3 className="title is-5">{section.title}</h3>
              <ul>
                {section.songs.map((song, songIndex) => {
                  const songData = choirSongs.find(cs => cs.choirSongId === song.choirSongVersionId);
                  return (
                    <li key={songIndex}>
                      {songData?.masterSong?.title}
                    </li>
                  );
                })}
              </ul>
              <div className="field has-addons mt-3">
                <div className="control">
                  <div className="select">
                    <select onChange={(e) => handleAddSongToSection(section.id, e.target.value)}>
                      <option>Select a song</option>
                      {choirSongs.map(song => (
                        <option key={song.choirSongId} value={song.choirSongId}>{song.masterSong?.title}</option>
                      ))}
                    </select>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CreatePlaylistPage;
